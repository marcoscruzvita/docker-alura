--primeiro comando para teste
docker run hello-world

//somente baixa a imagem
docker pull ubuntu:latest

//containers em execução
docker ps 

//containers em execução
docker container ls

//containers status
docker ps -a

//containers status
docker container ls -a

//para a execução do container
docker stop idDoContainer

//restartart a execução do container
docker start idDoContainer

//acessa o terminal do container
docker exec -it idDoContainer bash

//remove o container 
docker rm idDoContainer

docker run dockersamples/static-site


docker rm idDoContainer --force (para a execução e remove o container)


// sobe o container e define a porta da maquina e do container
docker run -d -p 8080(porta da maquina):80(porta do container) nomeDaImagem


// listar imagens
docker image ls

//informações da imagem
docker inspect idDaImagem

// comando para visualizar as camadas da imagem
docker history idDaImagem

//builda imagem a partir de dockerfile
docker build -t nomeCriado/nomeImagem:versao .


//"no run" 
-v caminhoMaquina:caminhoContainer cria volume com bind container para maquina

//mesmo exemplo acima usando --mount
--mount 

docker volume create nomeDoVolume
docker run -it --mount soruce=meu-volume,target=/app ubuntu bash

//tmpfs só roda no linux, cria um volume temporário dentro do host

docker run -it --tmpfs=/app ubuntu bash

//inspeciona as informações de um container em execução
docker inspect nomeDoContainer

// lista as redes criadas
docker network ls

// define um nome para o container
docker run -it --name nomeDoContainer --network minha-bridge nomeDaImagem 

//cria a propria rede para containers se chamarem através do name e não do ip
docker network create --driver bridge minha-bridge

// rede none - define um container com nenhuma rede disponível para o mesmo, sem nenhuma interface de rede vinculada

// rede host - define um container com a rede vinculada ao host

docker pull mongo:4.4.6